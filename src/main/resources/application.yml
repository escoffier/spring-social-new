spring:
    datasource:
        url: jdbc:mysql://192.168.21.225:3306/spring_social?useSSL=false
        username: testuser
        password: 19811981

    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 437552427673-k9pe15e903ddshqo38sfgk8bo7aja6ki.apps.googleusercontent.com
              clientSecret: ei_kE3NjHeXTjGpaYT6TaN3f
              redirectUriTemplate: "http://www.fakedomain.com/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 121189305185277
              clientSecret: 42ffe5aa7379e8326387e0fe16f34132
              redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
            github:
              clientId: 41221de788726d1a4f8b
              clientSecret: a642375641afcdae7497fe5821e77c6974fe2765
              redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - user:email
                - read:user
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
    autoconfigure:
      exclude: org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://192.168.21.225:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
logging:
  level:
    org:
      springframework:
        web: DEBUG
        sesecurity: DEBUG
        http: DEBUG
    com:
      example:
        springsocial: DEBUG


management:
  endpoints:
    web:
      exposure:
        include: "*"

server:
  port: 8080
